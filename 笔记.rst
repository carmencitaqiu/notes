1.for in :因为原型链的问题，会变脸一个对象的所有属性一直到达 object
2.如何获得一个DOM元素的绝对位置？
offsetHeight, offsetLeft, offsetTop,offsetWidth
3.图片加载问题：页面开始形成dom根据dom与css形成渲染树，这个过程结束后会加载图片
var imgLoad = function(url,callback) {
	var img = new Image();
	img.src = url;
	if(img.complete) {
		callback(img.width,img.height);
	} else {
		img.onload = function() {
			callback(img.width,img.height);
			img.onload = null;
		};
	}
};
var imgReady = function() {
	var list = [],intervalId = null,
	//用来执行队列
	tick = function() {
		var i = 0;
		for (;i<list.length;i++) 
		{
			list[i].end ? list.splice(i--,1):list[i]();
		};
		!list.length && stop();
	},
	//停止所有定时器队列
	stop = function() {
		clearInterval(intervalId);
		intervalId = null;
	};
	return function(url,ready,load,error) {
		var onready,width,height,newWidth,newHeight,
		img = new Image();
		img.src = null;
		//如果图片被缓存，则直接返回缓存数据
		if (img.complete) {
			ready.call(img);
			load && load.call(img);
			return;
		};
		width = img.width;
		height = img.height;
		//加载错误后的事件
		img.onerror = function() {
			error && error.call(img);
			onready.end = true;
			img = img.onload = img.onerror = null;
		};
		//图片尺寸就绪
		onready = function() {
			newWidth = img.width;
			newHeight = img.height;
			if (newWidth !== width || newHeight !== height || newWidth * newHeight > 1024) 
			{
				ready.call(img);
				onready.end = true;
			}
		};
		onready();
		//完全加载完毕的事件
		img.onload = function() {
			//onload在定时器时间差范围内可能比onready快
			//这里进行检查并保证onready优先执行
			!onready.end && onready();
			load && load.call(img);

			//IE gif动画会循环执行onload,置空onload即可
			img = img.onload = img.onerror = null;
		};
		//加入队列中定期执行
		if (!onready.end) 
		{
			list.push(onready);
			//无论何时只允许出现一个定时器，减少浏览器性能损耗
			if (intervalId === null) intervalId = setInterval(tick,40);
		}
	}();
}
6. 模拟HashTable
var HashTable = function() {
	this.data = {};
};
HashTable.prototype.add = function(k,v) {
	this.data[k] = v;	//不存在便赋值，存在便更新
};
HashTable.prototype.remove = function(k) {
	if (this.data[k]) delete this.data[k];
};
HashTable.prototype.contains = function(v) {
	var exist = false;
	for (var k in this.data) {
		if (v == this.data[k]) {
			exist = true;
			break;
		}
	}
	return exist;
};
HashTable.prototype.length = function() {
	var len = 0;
	for (var k in this.data){
		len++;
	}
	return len;
};
ajax:
XMLHttpRequest
从表单中获取数据 建立连接url 打开服务器连接 设置数据返回回调函数  发送请求
xmlHttp.open('GET',url,true);
xmlHttp.onreadystatechange = function(e){}; //指定数据返回时回调函数
xmlHttp.send(null)
跨域：
跨域请求数据，
